---
- hosts: Dk3s_master
  gather_facts: false
  become: no
  tasks:
{% raw %}
    - name: Wait for the machine to be available
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: not ansible_check_mode
    - name: Change GPU Mem to 16
      become: yes
      lineinfile:
        path: /boot/config.txt
        regexp: "^gpu_mem=.*"
        line: "gpu_mem=16"
        state: present
    - name: cmdline cgroups 
      become: yes
      replace:
        destfile: /boot/cmdline.txt
        regexp: "^console=serial0,115200 console=tty1 root=PARTUUID=6c586e13-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait$"
        replace: "console=serial0,115200 console=tty1 root=PARTUUID=6c586e13-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory"
    - name: Use iptables-legacy
      become: yes
      shell:  update-alternatives --set iptables /usr/sbin/iptables-legacy > /dev/null
      when: not ansible_check_mode
    - name: Use iptables-legacy, IPv6
      become: yes
      shell:  update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy > /dev/null 
      when: not ansible_check_mode
    - name: Allow all machines in cluster access to all ports
      become: yes
      ufw:
        rule: allow
        comment: 'k8s cluster'
        src: '192.168.0.0/24'
      when: not ansible_check_mode
    - name: Allow traffic within k3s elements
      become: yes
      ufw:
        rule: allow
        comment: 'k8s cluster'
        src: '10.0.0.0/8'
      when: not ansible_check_mode
    - name: Reboot immediately 
      become: yes
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      #when: task_result is changed
      when: not ansible_check_mode
    - name: Wait for the reboot to complete
      wait_for_connection:
        connect_timeout: 20
        sleep: 15
        delay: 10
        timeout: 300
        #when: task_result is changed
      when: not ansible_check_mode
    - name: Download k3s binary
      become: yes
      get_url: url=https://github.com/rancher/k3s/releases/download/v0.2.0/k3s-armhf dest=/usr/local/bin/k3s mode=a+x

    - name: Point hostname to localhost (k3s requirement)
      become: yes
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{inventory_hostname}}"
    - name: Install k3s server service
      become: yes
      get_url: 
        url: https://raw.githubusercontent.com/rancher/k3s/master/k3s.service
        dest: /etc/systemd/system/k3s-server.service
        mode: a+x
        force: yes
      content: "BAR=foo"
    - name: create env file if it doesn't exist
      become: yes
      file:
        path: "/etc/systemd/system/k3s.service.env"
        state: touch

    - name: Enable and start the k3s server service
      become: yes
      service:
        name: k3s-server
        enabled: yes
        state: started
    - name: Add k3s alias for our user
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        regexp: "^alias k3='sudo k3s kubectl '$"
        line: "alias k3='sudo k3s kubectl '"
        owner: '{{ ansible_user }}'
        state: present
        insertafter: EOF
        create: True
    - name: Add better alias for watch 
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        regexp: "^alias watch='watch '$"
        line: "alias watch='watch '"
        owner: '{{ ansible_user }}'
        state: present
        insertafter: EOF
        create: True
# install repos for application data
    - name: Clone CNS-FE repository into this machine
      git:
        repo: https://github.com/code-and-share/datafeed-frontend.git
        version: master
        dest: /home/aafmin/datafeed-frontend
      become: no
    - name: Clone CNS-BE repository into this machine
      git:
        repo: https://github.com/code-and-share/datafeed-backend.git
        version: master
        dest: /home/aafmin/datafeed-backend
      become: no
    - name: Wait until node token is generated
      become: yes
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token
      run_once: true

    - name: Get node token
      become: yes
      slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: k3s_cluster_token
      run_once: true
      when: not ansible_check_mode
    - name: Clean up node token contents
      become: yes
      set_fact: 
        k3s_cluster_token: "{{ k3s_cluster_token['content'] | b64decode | replace('\n', '')}}"
      run_once: yes
      when: not ansible_check_mode

    - name: Print cluster node token
      become: yes
      debug:
        msg: "{{ k3s_cluster_token }}"
      when: not ansible_check_mode

    - name: Set server address
      become: yes
      set_fact:
        k3s_server_address: "https://{{ inventory_hostname }}:6443"
      run_once: yes

    - name: Print server address
      become: yes
      debug:
        msg: "{{ k3s_server_address }}"


{% endraw %}
# prepare memory to run k3s
